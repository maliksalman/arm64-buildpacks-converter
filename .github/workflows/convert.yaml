name: Convert Tiny Builder
on: [ workflow_dispatch ]
env:
  BUILDER: "paketobuildpacks/builder:tiny"
  BUILDER_DIR: "builders/paketobuildpacks/builder:tiny"
  OCI_IMAGE_PREFIX: "docker.io/maliksalman"

jobs:

  check:
    runs-on: [self-hosted, Linux, ARM64]
    outputs:
      status: ${{ steps.check.outputs.status }}
    steps:
      - id: checkout
        uses: actions/checkout@v3
      - id: get-manifest
        run: |
          mkdir -p $BUILDER_DIR
          pack builder inspect $BUILDER -o json | jq .remote_info > "$BUILDER_DIR/info.json"
      - id: check
        run: |
          CHANGED=$(git diff --exit-code --output=/dev/null "$BUILDER_DIR/info.json"; echo $?)
          if [[ $CHANGED -eq 0 ]]; then
              echo "Nothing changed since last conversion"
              echo "status=skip" >> $GITHUB_OUTPUT
          else
              echo "Something changed, we will perform the conversion"
              echo "status=convert" >> $GITHUB_OUTPUT
          fi

  convert:
    runs-on: [self-hosted, Linux, ARM64]
    needs: [check]
    if: needs.check.outputs.status == 'convert'
    env:
      CACHE_DIR: ".work/cache"
    steps:
      - id: cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-cache
      - id: start-fixer
        run: |
          mkdir -p $CACHE_DIR
          echo "Cache: $PWD/$CACHE_DIR"
          docker rm -f buildpacks-manifest-fixer 2> /dev/null
          docker run -d \
              --name buildpacks-manifest-fixer \
              -e CONFIG_ARTIFACTSHACACHEDIR=/workspace/cache \
              -e CONFIG_IMAGEPREFIX=$OCI_IMAGE_PREFIX \
              -v $PWD/$CACHE_DIR:/workspace/cache \
              --user $(id -u):$(id -g) \
              -p 58585:8080 \
              maliksalman/buildpacks-manifest-fixer:1.0.0-arm64
      - id: clone-buildpacks
        run: |
          for BP in $(jq '.buildpacks[] | {id,version}' -c $BUILDER_DIR/info.json); do
            BP_ID=$(echo "$BP" | jq -r ".id")
            BP_VER=$(echo "$BP" | jq -r ".version")
            ./clone-buildpack.sh "$BP_ID" "$BP_VER" ".work/buildpacks"
          done
      - id: convert-simple-buildpacks
        run: |
          for BP in $(jq '.buildpacks[] | {id,version}' -c $BUILDER_DIR/info.json); do
            BP_ID=$(echo "$BP" | jq -r ".id")
            BP_VER=$(echo "$BP" | jq -r ".version")
            ./convert-buildpack.sh "$BP_ID" "$BP_VER" .work/buildpacks false $OCI_IMAGE_PREFIX
          done
      - id: convert-composite-buildpacks
        run: |
          for BP in $(jq '.buildpacks[] | {id,version}' -c $BUILDER_DIR/info.json); do
            BP_ID=$(echo "$BP" | jq -r ".id")
            BP_VER=$(echo "$BP" | jq -r ".version")
            ./convert-buildpack.sh "$BP_ID" "$BP_VER" .work/buildpacks true $OCI_IMAGE_PREFIX
          done
      
  version:
    runs-on: [self-hosted, Linux, ARM64]
    needs: [check]
    if: needs.check.outputs.status == 'convert'
    outputs:
      VERSION: ${{ steps.bump-semver.outputs.new_version }}
    steps:
      - id: existing-version
        run: |
          EXISTING_VER=$(cat $BUILDER_DIR/version)
          echo "EXISTING_VER=$EXISTING_VER" >> $GITHUB_ENV
      - id: bump-semver
        uses: actions-ecosystem/action-bump-semver@v1
        with:
          current_version: ${{ env.EXISTING_VER }}
          level: minor
      - id: update-version
        env:
          VERSION: ${{ steps.bump-semver.outputs.new_version }}
        run: |
          echo "$VERSION" > $BUILDER_DIR/version

  stack:
    runs-on: [self-hosted, Linux, ARM64]
    needs: [check, version]
    if: needs.check.outputs.status == 'convert'
    env:
      VERSION: ${{ needs.version.outputs.VERSION }}
    outputs:
      STACK_ID: ${{ steps.idnames.outputs.STACK_ID }}
      STACK_IMAGES_PREFIX: ${{ steps.idnames.outputs.STACK_IMAGES_PREFIX }}
      STACK_RUN_IMAGE: ${{ steps.stack-run.outputs.STACK_RUN_IMAGE }}
      STACK_BUILD_IMAGE: ${{ steps.stack-build.outputs.STACK_BUILD_IMAGE }}
    steps:
      - id: idnames
        run: |
          STACK_ID="$(jq '.stack.id' $BUILDER_DIR/info.json -r)"
          echo "STACK_ID=$STACK_ID" >> $GITHUB_OUTPUT
          echo "STACK_ID=$STACK_ID" >> $GITHUB_ENV

          STACK_IMAGES_PREFIX=$(echo $BUILDER | sed 's|\(.*\)/\(.*\):\(.*\)|\1-\2-\3|')
          echo "STACK_IMAGES_PREFIX=$STACK_IMAGES_PREFIX" >> $GITHUB_OUTPUT
          echo "STACK_IMAGES_PREFIX=$STACK_IMAGES_PREFIX" >> $GITHUB_ENV
      - id: stack-build
        run: |
          STACK_BUILD_IMAGE="$OCI_IMAGE_PREFIX/$STACK_IMAGES_PREFIX-build:arm64-$VERSION"
          echo "STACK_BUILD_IMAGE=$STACK_BUILD_IMAGE" >> $GITHUB_OUTPUT

          docker build . \
              -t $STACK_BUILD_IMAGE \
              --build-arg STACK_ID="$STACK_ID" \
              --target build
      - id: stack-run
        run: |
          STACK_RUN_IMAGE="$OCI_IMAGE_PREFIX/$STACK_IMAGES_PREFIX-run:arm64-$VERSION"
          echo "STACK_RUN_IMAGE=$STACK_RUN_IMAGE" >> $GITHUB_OUTPUT

          docker build . \
              -t  $STACK_RUN_IMAGE \
              --build-arg STACK_ID="$STACK_ID" \
              --target run

  builder:
    runs-on: [self-hosted, Linux, ARM64]
    needs: [check, convert, version, stack]
    if: needs.check.outputs.status == 'convert'
    outputs:
      BUILDER_IMAGE: ${{ steps.create.outputs.BUILDER_IMAGE }}
    env:
      VERSION: ${{ needs.version.outputs.VERSION }}
      STACK_ID: ${{ needs.stack.outputs.STACK_ID }}
      STACK_IMAGES_PREFIX: ${{ needs.stack.outputs.STACK_IMAGES_PREFIX }}
    steps:
      - id: make-input
        run: |
          jq  --arg STACK_ID "$STACK_ID" \
              --arg STACK_IMAGES_PREFIX "$OCI_IMAGE_PREFIX/$STACK_IMAGES_PREFIX" \
              '. += {stack: {id: $STACK_ID, "images-prefix": $STACK_IMAGES_PREFIX}}' \
              $BUILDER_DIR/info.json > $BUILDER_DIR/input.json
      - id: make-toml
        run: |
          curl -X POST -H "Content-Type: application/json" \
              -d "$(cat $BUILDER_DIR/input.json)" \
              "http://localhost:58585/builder/arm64-${VERSION}" -s | yj -jt -i > $BUILDER_DIR/builder.toml
      - id: create
        run: |
          BUILDER_IMAGE="$OCI_IMAGE_PREFIX/$STACK_IMAGES_PREFIX:arm64-$VERSION"
          echo "BUILDER_IMAGE=$BUILDER_IMAGE" >> $GITHUB_OUTPUT

          pack builder create "$BUILDER_IMAGE" \
              --config "$BUILDER_DIR/builder.toml" \
              --pull-policy never

  publish:
    runs-on: [self-hosted, Linux, ARM64]
    needs: [check, version, stack, builder]
    if: needs.check.outputs.status == 'convert'
    env:
      VERSION: ${{ needs.version.outputs.VERSION }}
      BUILDER_IMAGE: ${{ needs.builder.outputs.BUILDER_IMAGE }}
      STACK_IMAGES_PREFIX: ${{ needs.stack.outputs.STACK_IMAGES_PREFIX }}
      STACK_RUN_IMAGE: ${{ needs.stack.outputs.STACK_RUN_IMAGE }}
      STACK_BUILD_IMAGE: ${{ needs.stack.outputs.STACK_BUILD_IMAGE }}
    steps:
      - id: login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - id: publish-images
        run: |
          echo docker push $STACK_RUN_IMAGE
          echo docker push $STACK_BUILD_IMAGE
          echo docker push $BUILDER_IMAGE
      - id: manifest-name
        run: |
          MANIFEST_IMAGE="$OCI_IMAGE_PREFIX/$STACK_IMAGES_PREFIX:$VERSION"
          echo "MANIFEST_IMAGE=$MANIFEST_IMAGE" >> $GITHUB_ENV
      - id: reset-manifest
        run: |
          MANIFEST_EXISTS=true
          docker manifest inspect $MANIFEST_IMAGE >/dev/null 2>/dev/null || MANIFEST_EXISTS=false
          if [ "$MANIFEST_EXISTS" == "true" ]; then
              docker manifest rm $MANIFEST_IMAGE
          fi
      - id: make-manifest
        run: |
          docker pull $BUILDER
          docker manifest create $MANIFEST_IMAGE \
              $BUILDER_IMAGE \
              $BUILDER
      - id: publish-manifest
        run: |
          echo docker push $MANIFEST_IMAGE
